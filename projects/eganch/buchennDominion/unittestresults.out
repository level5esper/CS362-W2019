*********************************************
unittest1.c
Testing numHandCards function from dominion.c
---------------------------------------------

---------------------------------------------
TEST 1: numHandCards should return 5 for first player after game is initialized
Expected: 5          Actual: 5
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 2: numHandCards should return 0 for second player after game is initialized
Expected: 0          Actual: 0
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 3: numHandCards should return 15 for first player when manually set
Expected: 15          Actual: 15
TEST PASSED

---------------------------------------------

---------------------------------------------
STATUS OF TESTS
Total passing tests: 3
Total failing tests: 0
---------------------------------------------
*********************************************
*********************************************
unittest2.c
Testing playCard function from dominion.c
---------------------------------------------

---------------------------------------------
TEST 1: playCard should return -1 if the phase is not 0
Expected: -1          Actual: -1
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 2: playCard should return -1 if the player has less than 1 actions
Expected: -1          Actual: -1
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 3: playCard should return -1 if the card played is a basic card
Expected: -1          Actual: -1
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 4: playCard should return -1 if the card played is greater than treasure_map in enum
Expected: -1          Actual: -1
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 5: playCard should return -1 if the card played has an effect that returns -1
Expected: -1          Actual: -1
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 6: playCard should reduce the number of actions if the card played does not return -1
Expected: 0          Actual: 0
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 7: playCard should update the coins based on the treasures in the hand
Expected: 1          Actual: 1
TEST PASSED

---------------------------------------------

---------------------------------------------
STATUS OF TESTS
Total passing tests: 7
Total failing tests: 0
---------------------------------------------
*********************************************
*********************************************
unittest3.c
Testing handCard function from dominion.c
---------------------------------------------

---------------------------------------------
TEST 1: Calls handCard with a handPos that does not have a card
handPos is an index higher than number of cards in hand
Expected: -1          Actual: 387389207
TEST FAILED

handPos is an index lower than number of cards in hand
Expected: -1          Actual: 1
TEST FAILED

---------------------------------------------

---------------------------------------------
TEST 2: Calls handCard with a handPos that is higher than four
Hands start out with five, checking that handCard can return a sixth
Expected: 13          Actual: 13
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 3: Get the first card for player 1
Expected: 8          Actual: 8
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 4: Get the last card for player 1
Expected: 27          Actual: 27
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 5: Can loop through all cards in hand correctly
Expected: 8, 26, 4, 23, 27, Actual: 8, 26, 4, 23, 27, 
TEST PASSED

---------------------------------------------

---------------------------------------------
STATUS OF TESTS
Total passing tests: 4
Total failing tests: 2
---------------------------------------------
*********************************************
*********************************************
unittest4.c
Testing endTurn function from dominion.c
---------------------------------------------

---------------------------------------------
TEST 1: The player whose turn is ending should have an empty hand
Expected: 0          Actual: 0
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 2: All cards in the current player's hand should be set to -1
Expected: -1, -1, -1, -1, -1, Actual: -1, -1, -1, -1, -1, 
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 3: When the first player ends their turn, it is the second player's turn
Expected: 1          Actual: 1
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 4: When the second player ends their turn, it is the first player's turn
Expected: 0          Actual: 0
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 5: The following variables are reset
outpostPlayed
Expected: 0          Actual: 0
TEST PASSED

phase
Expected: 0          Actual: 0
TEST PASSED

numActions
Expected: 1          Actual: 1
TEST PASSED

numBuys
Expected: 1          Actual: 1
TEST PASSED

playedCardCount
Expected: 0          Actual: 0
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 6: The next player draws five cards
The player should have a hand count of 5
Expected: 5          Actual: 5
TEST PASSED

The player's hand should not hold any set to -1
CARDS:
4
1
1
4
4
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 8: All cards in the current player's hand should be discarded
Discard count should equal the player's hand count
Expected: 5          Actual: 5
TEST PASSED

Discard pile should hold curse, estate, duchy, province, copper
Expected: 0, 1, 2, 3, 4, Actual: 0, 1, 2, 3, 4, 
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 9: Any cards added to playedCards should be emptied
No cards in playedCardCount
Expected: -1          Actual: 4
TEST FAILED

---------------------------------------------

---------------------------------------------
STATUS OF TESTS
Total passing tests: 13
Total failing tests: 1
---------------------------------------------
*********************************************
*********************************************
cardtest1.c
Testing council_room card from cardEffect function in dominion.c
---------------------------------------------

---------------------------------------------
TEST 1: player should have three additional cards in hand
They draw four then discard the council_room card.
Expected: 8          Actual: 8
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 2: Player gets another buy resulting in two buys
Expected: 2          Actual: 2
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 3: The second player should draw a card
Expected: 1          Actual: 1
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 4: The player should discard the council room card
Council room should not be in their hand.
CARDS:
1
26
4
23
27
4
4
4
TEST PASSED

Council room should be in the played card pile.
CARDS:
8
TEST PASSED

---------------------------------------------

---------------------------------------------
STATUS OF TESTS
Total passing tests: 5
Total failing tests: 0
---------------------------------------------
*********************************************
*********************************************
cardtest2.c
Testing village card from cardEffect function in dominion.c
---------------------------------------------

---------------------------------------------
TEST 1: player should have the same amount of cards as what they started with
They draw one then discard the village card.
Expected: 5          Actual: 5
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 2: Player gets two more actions resulting in three actions
Expected: 3          Actual: 3
TEST PASSED

---------------------------------------------

---------------------------------------------
TEST 4: The player should discard the village card
Village should not be in their hand.
CARDS:
4
26
4
23
27
TEST PASSED

Village should be in the played card pile.
CARDS:
14
TEST PASSED

---------------------------------------------

---------------------------------------------
STATUS OF TESTS
Total passing tests: 4
Total failing tests: 0
---------------------------------------------
*********************************************
*********************************************
cardtest3.c
Testing adventurer card from cardEffect function in dominion.c
---------------------------------------------

---------------------------------------------
TEST 1: If the deck is empty, cards should be shuffled and added back to deck
The deck count should be greater than 0
0 > 0
TEST FAILED

---------------------------------------------

---------------------------------------------
TEST 2: If the player draws copper cards, they are added to their hand
Should discard adventurer, draw two treasures, resulting in 6 cards in hand
Expected: 6          Actual: 7
TEST FAILED

Should have treasure_map, copper, outpost, 27, copper, copper in hand
Expected: 26, 4, 23, 27, 4, 4, Actual: 7, 26, 4, 23, 27, 4, 4, 
TEST FAILED

Should only have discarded adventurer, no temp cards to discard
Expected: 1          Actual: 0
TEST FAILED

Discard pile should hold adventurer
Expected: 7, Actual: 
TEST FAILED

---------------------------------------------

---------------------------------------------
TEST 3: If the deck only has one treasure then it should not shuffle again and only get one treasure
Should stop searching after deck is empty and keep one treasure
Should discard adventurer, draw one treasure, resulting in 5 cards
Expected: 5          Actual: 6
TEST FAILED

Should have treasure_map, copper, outpost, 27, copper in hand
Expected: 26, 4, 23, 27, 4, Actual: 7, 26, 4, 23, 27, 4, 
TEST FAILED

---------------------------------------------

---------------------------------------------
TEST 4: If the player draws two non-treasure cards and then two treasure cards, the temp hand should discard twice
Discard pile should have estate, estate, estate, estate, estate, estate, estate, estate, adventurer
Expected: 1, 1, 1, 1, 1, 1, 1, 1, 7, Actual: 1, 1, 1, 1, 1, 1, 1, 
TEST FAILED

Discard pile should have 9 cards
Expected: 9          Actual: 7
TEST FAILED

---------------------------------------------

---------------------------------------------
STATUS OF TESTS
Total passing tests: 0
Total failing tests: 9
---------------------------------------------
*********************************************
*********************************************
cardtest4.c
Testing smithy card from cardEffect function in dominion.c
---------------------------------------------

---------------------------------------------
TEST 1: player should have seven cards
They draw three then discard the smithy card.
Expected: 7          Actual: 8
TEST FAILED

---------------------------------------------

---------------------------------------------
TEST 2: The Smithy card should be discarded and added to played pile
The smithy card should be removed from the hand
CARDS:
1
26
4
23
27
4
4
4
TEST PASSED

Smithy should be in the played card pile.
CARDS:
13
TEST PASSED

---------------------------------------------

---------------------------------------------
STATUS OF TESTS
Total passing tests: 2
Total failing tests: 1
---------------------------------------------
*********************************************
Function 'useCutpurse'
Lines executed:0.00% of 13
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'useEmbargo'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 1

Function 'useSalvager'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 4

Function 'useSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'useAdventurer'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:14.21% of 197
Branches executed:21.89% of 169
Taken at least once:11.24% of 169
Calls executed:15.79% of 57

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:100.00% of 20
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:100.00% of 14
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'printf'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 1

File 'dominion.c'
Lines executed:36.02% of 558
Branches executed:34.29% of 417
Taken at least once:25.66% of 417
Calls executed:30.53% of 95
Creating 'dominion.c.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 1
Creating 'stdio.h.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1512 returned 100% blocks executed 83%
     1512:    8:int compare(const void* a, const void* b) {
     1512:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     1512:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
      360:   12:    return -1;
     1152:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 36 returned 100% blocks executed 88%
       36:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:  struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       36:   44:  SelectStream(1);
call    0 returned 100%
       36:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
       36:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
       36:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      396:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:  {
     3960:   59:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:    {
     3600:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
        -:   65:    }
        -:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       36:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:  {
       36:   75:    state->supplyCount[curse] = 10;
        -:   76:  }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:  {
    #####:   79:    state->supplyCount[curse] = 20;
        -:   80:  }
        -:   81:  else
        -:   82:  {
    #####:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
       36:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:  {
       36:   89:    state->supplyCount[estate] = 8;
       36:   90:    state->supplyCount[duchy] = 8;
       36:   91:    state->supplyCount[province] = 8;
        -:   92:  }
        -:   93:  else
        -:   94:  {
    #####:   95:    state->supplyCount[estate] = 12;
    #####:   96:    state->supplyCount[duchy] = 12;
    #####:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
       36:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       36:  102:  state->supplyCount[silver] = 40;
       36:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      756:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:  {
     5940:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:    {
     5580:  110:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
      360:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:        {
       72:  115:          if (numPlayers == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       36:  116:            state->supplyCount[i] = 8;
        -:  117:          }
    #####:  118:          else { state->supplyCount[i] = 12; }
        -:  119:        }
        -:  120:        else
        -:  121:        {
      324:  122:          state->supplyCount[i] = 10;
        -:  123:        }
      360:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
     5220:  128:        state->supplyCount[i] = -1;
        -:  129:      }
        -:  130:    }
        -:  131:
        -:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      108:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:  {
       72:  140:    state->deckCount[i] = 0;
      288:  141:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:    {
      216:  143:      state->deck[i][j] = estate;
      216:  144:      state->deckCount[i]++;
        -:  145:    }
      576:  146:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:    {
      504:  148:      state->deck[i][j] = copper;
      504:  149:      state->deckCount[i]++;
        -:  150:    }
        -:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
      108:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:  {
       72:  156:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
        -:  160:  }
        -:  161:
        -:  162:  //draw player hands
      108:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:  {
        -:  165:    //initialize hand size to zero
       72:  166:    state->handCount[i] = 0;
       72:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //	{
        -:  171:    //	  drawCard(i, state);
        -:  172:    //	}
        -:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
     1008:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:  {
      972:  178:    state->embargoTokens[i] = 0;
        -:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
       36:  182:  state->outpostPlayed = 0;
       36:  183:  state->phase = 0;
       36:  184:  state->numActions = 1;
       36:  185:  state->numBuys = 1;
       36:  186:  state->playedCardCount = 0;
       36:  187:  state->whoseTurn = 0;
       36:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      216:  192:  for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      180:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       36:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       36:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 82 returned 100% blocks executed 100%
       82:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       82:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       82:  209:  if (state->deckCount[player] < 1)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
       10:  210:    return -1;
       72:  211:  qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      864:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      720:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      720:  216:    newDeck[newDeckPos] = state->deck[player][card];
      720:  217:    newDeckPos++;
     2520:  218:    for (i = card; i < state->deckCount[player] - 1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     1800:  219:      state->deck[player][i] = state->deck[player][i + 1];
        -:  220:    }
      720:  221:    state->deckCount[player]--;
        -:  222:  }
      792:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      720:  224:    state->deck[player][i] = newDeck[i];
      720:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       72:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 7 returned 100% blocks executed 100%
        7:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
        7:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:                          //check if it is the right phase
        7:  237:  if (state->phase != 0)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  238:  {
        1:  239:    return -1;
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
        6:  243:  if (state->numActions < 1)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  244:  {
        1:  245:    return -1;
        -:  246:  }
        -:  247:
        -:  248:  //get card played
        5:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:  //check if selected card is an action
        5:  252:  if (card < adventurer || card > treasure_map)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        -:  253:  {
        2:  254:    return -1;
        -:  255:  }
        -:  256:
        -:  257:  //play card
        3:  258:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  259:  {
        1:  260:    return -1;
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
        2:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        2:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:
        2:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG) {
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
        -:  286:  }
    #####:  287:  else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
        -:  291:  }
    #####:  292:  else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG)
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  }
        -:  297:  else {
    #####:  298:    state->phase = 1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  301:
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:
    #####:  311:  return 0;
        -:  312:}
        -:  313:
function numHandCards called 3 returned 100% blocks executed 100%
        3:  314:int numHandCards(struct gameState *state) {
        3:  315:  return state->handCount[whoseTurn(state)];
call    0 returned 100%
        -:  316:}
        -:  317:
function handCard called 15 returned 100% blocks executed 100%
       15:  318:int handCard(int handPos, struct gameState *state) {
       15:  319:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       15:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:  {
    #####:  333:    if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  334:  }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:  {
    #####:  338:    if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  339:  }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:  {
    #####:  343:    if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  344:  }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
function whoseTurn called 42 returned 100% blocks executed 100%
       42:  349:int whoseTurn(struct gameState *state) {
       42:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 8 returned 100% blocks executed 100%
        8:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
        8:  356:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  357:
        -:  358:  //Discard hand
       43:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
       35:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       35:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:  }
        8:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:
        -:  365:                                      //Code for determining the player
        8:  366:  if (currentPlayer < (state->numPlayers - 1)) {
branch  0 taken 88% (fallthrough)
branch  1 taken 13%
        7:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:  }
        -:  369:  else {
        1:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
        8:  373:  state->outpostPlayed = 0;
        8:  374:  state->phase = 0;
        8:  375:  state->numActions = 1;
        8:  376:  state->coins = 0;
        8:  377:  state->numBuys = 1;
        8:  378:  state->playedCardCount = 0;
        8:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
       48:  383:  for (k = 0; k < 5; k++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  384:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  385:  }
        -:  386:
        -:  387:  //Update money
        8:  388:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  389:
        8:  390:  return 0;
        -:  391:}
        -:  392:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:
        -:  397:  //if stack of Province cards is empty, the game ends
    #####:  398:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  399:  {
    #####:  400:    return 1;
        -:  401:  }
        -:  402:
        -:  403:  //if three supply pile are at 0, the game ends
    #####:  404:  j = 0;
    #####:  405:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  406:  {
    #####:  407:    if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  408:    {
    #####:  409:      j++;
        -:  410:    }
        -:  411:  }
    #####:  412:  if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  413:  {
    #####:  414:    return 1;
        -:  415:  }
        -:  416:
    #####:  417:  return 0;
        -:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  420:int scoreFor(int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:  {
    #####:  427:    if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:    if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:    if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  430:    if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  431:    if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:    if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  433:  }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  437:  {
    #####:  438:    if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:    if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:    if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  441:    if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  442:    if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:    if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  444:  }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:  {
    #####:  449:    if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:    if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:    if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  452:    if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  453:    if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:    if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  455:  }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:  {
        -:  469:    //set unused player scores to -9999
    #####:  470:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:      players[i] = -9999;
        -:  473:    }
        -:  474:    else
        -:  475:    {
    #####:  476:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  477:    }
        -:  478:  }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:  {
    #####:  484:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:    {
    #####:  486:      j = i;
        -:  487:    }
        -:  488:  }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:  {
    #####:  495:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:    {
    #####:  497:      players[i]++;
        -:  498:    }
        -:  499:  }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:  {
    #####:  505:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  506:    {
    #####:  507:      j = i;
        -:  508:    }
        -:  509:  }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:  {
    #####:  515:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  516:    {
    #####:  517:      players[i] = 1;
        -:  518:    }
        -:  519:    else
        -:  520:    {
    #####:  521:      players[i] = 0;
        -:  522:    }
        -:  523:  }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
function drawCard called 278 returned 100% blocks executed 85%
      278:  528:int drawCard(int player, struct gameState *state)
        -:  529:{
        -:  530:  int count;
        -:  531:  int deckCounter;
      278:  532:  if (state->deckCount[player] <= 0) {//Deck is empty
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  533:
        -:  534:                                      //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
        5:  537:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  538:      state->deck[player][i] = state->discard[player][i];
    #####:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
        5:  542:    state->deckCount[player] = state->discardCount[player];
        5:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:                                    //Shufffle the deck
        5:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  547:
        -:  548:    if (DEBUG) {//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:
        5:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
        5:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:
        -:  557:    if (DEBUG) {//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:
        5:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
        5:  563:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  564:      return -1;
        -:  565:
    #####:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  567:    state->deckCount[player]--;
    #####:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else {
      273:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG) {//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
      273:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
      273:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      273:  580:    state->deckCount[player]--;
      273:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
      273:  584:  return 0;
        -:  585:}
        -:  586:
function getCost called 0 returned 0% blocks executed 0%
    #####:  587:int getCost(int cardNumber)
        -:  588:{
    #####:  589:  switch (cardNumber)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  590:  {
        -:  591:  case curse:
    #####:  592:    return 0;
        -:  593:  case estate:
    #####:  594:    return 2;
        -:  595:  case duchy:
    #####:  596:    return 5;
        -:  597:  case province:
    #####:  598:    return 8;
        -:  599:  case copper:
    #####:  600:    return 0;
        -:  601:  case silver:
    #####:  602:    return 3;
        -:  603:  case gold:
    #####:  604:    return 6;
        -:  605:  case adventurer:
    #####:  606:    return 6;
        -:  607:  case council_room:
    #####:  608:    return 5;
        -:  609:  case feast:
    #####:  610:    return 4;
        -:  611:  case gardens:
    #####:  612:    return 4;
        -:  613:  case mine:
    #####:  614:    return 5;
        -:  615:  case remodel:
    #####:  616:    return 4;
        -:  617:  case smithy:
    #####:  618:    return 4;
        -:  619:  case village:
    #####:  620:    return 3;
        -:  621:  case baron:
    #####:  622:    return 4;
        -:  623:  case great_hall:
    #####:  624:    return 3;
        -:  625:  case minion:
    #####:  626:    return 5;
        -:  627:  case steward:
    #####:  628:    return 3;
        -:  629:  case tribute:
    #####:  630:    return 5;
        -:  631:  case ambassador:
    #####:  632:    return 3;
        -:  633:  case cutpurse:
    #####:  634:    return 4;
        -:  635:  case embargo:
    #####:  636:    return 2;
        -:  637:  case outpost:
    #####:  638:    return 5;
        -:  639:  case salvager:
    #####:  640:    return 4;
        -:  641:  case sea_hag:
    #####:  642:    return 4;
        -:  643:  case treasure_map:
    #####:  644:    return 4;
        -:  645:  }
        -:  646:
    #####:  647:  return -1;
        -:  648:}
        -:  649:
function cardEffect called 16 returned 100% blocks executed 14%
       16:  650:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  651:{
        -:  652:  int i;
        -:  653:  int j;
        -:  654:  int x;
        -:  655:  int index;
       16:  656:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       16:  657:  int nextPlayer = currentPlayer + 1;
        -:  658:
       16:  659:  int tributeRevealedCards[2] = { -1, -1 };
        -:  660:  int temphand[MAX_HAND];// moved above the if statement
       16:  661:  if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
       16:  667:  switch (card) {
branch  0 taken 25%
branch  1 taken 31%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 13%
branch  7 taken 19%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 6%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 6%
branch 20 taken 0%
        -:  668:  case adventurer:
        -:  669:
        4:  670:    return useAdventurer(currentPlayer, state, temphand);
call    0 returned 100%
        -:  671:
        -:  672:  case council_room:
        -:  673:    //+4 Cards/
       25:  674:    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  675:    {
       20:  676:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  677:    }
        -:  678:
        -:  679:    //+1 Buy
        5:  680:    state->numBuys++;
        -:  681:
        -:  682:    //Each other player draws a card
       15:  683:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  684:    {
       10:  685:      if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  686:      {
        5:  687:        drawCard(i, state);
call    0 returned 100%
        -:  688:      }
        -:  689:    }
        -:  690:
        -:  691:    //put played card in played card pile
        5:  692:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  693:
        5:  694:    return 0;
        -:  695:
        -:  696:  case feast:
        -:  697:    //gain card with cost up to 5
        -:  698:    //Backup hand
    #####:  699:    for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  700:      temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:      state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:    }
        -:  703:    //Backup hand
        -:  704:
        -:  705:    //Update Coins for Buy
    #####:  706:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  707:    x = 1;//Condition to loop on
    #####:  708:    while (x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  709:      if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  710:        if (DEBUG)
        -:  711:          printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:        if (DEBUG) {
        -:  714:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:        }
        -:  716:      }
    #####:  717:      else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  718:        printf("That card is too expensive!\n");
call    0 never executed
        -:  719:
        -:  720:        if (DEBUG) {
        -:  721:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:        }
        -:  723:      }
        -:  724:      else {
        -:  725:
        -:  726:        if (DEBUG) {
        -:  727:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:        }
        -:  729:
    #####:  730:        gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  731:        x = 0;//No more buying cards
        -:  732:
        -:  733:        if (DEBUG) {
        -:  734:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:        }
        -:  736:
        -:  737:      }
        -:  738:    }
        -:  739:
        -:  740:    //Reset Hand
    #####:  741:    for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  742:      state->hand[currentPlayer][i] = temphand[i];
    #####:  743:      temphand[i] = -1;
        -:  744:    }
        -:  745:    //Reset Hand
        -:  746:
    #####:  747:    return 0;
        -:  748:
        -:  749:  case gardens:
    #####:  750:    return -1;
        -:  751:
        -:  752:  case mine:
    #####:  753:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  756:    {
    #####:  757:      return -1;
        -:  758:    }
        -:  759:
    #####:  760:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  761:    {
    #####:  762:      return -1;
        -:  763:    }
        -:  764:
    #####:  765:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  766:    {
    #####:  767:      return -1;
        -:  768:    }
        -:  769:
    #####:  770:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  771:
        -:  772:    //discard card from hand
    #####:  773:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  774:
        -:  775:    //discard trashed card
    #####:  776:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  777:    {
    #####:  778:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  779:      {
    #####:  780:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  781:        break;
        -:  782:      }
        -:  783:    }
        -:  784:
    #####:  785:    return 0;
        -:  786:
        -:  787:  case remodel:
    #####:  788:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  791:    {
    #####:  792:      return -1;
        -:  793:    }
        -:  794:
    #####:  795:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  796:
        -:  797:    //discard card from hand
    #####:  798:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  799:
        -:  800:    //discard trashed card
    #####:  801:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  802:    {
    #####:  803:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  804:      {
    #####:  805:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  806:        break;
        -:  807:      }
        -:  808:    }
        -:  809:
        -:  810:
    #####:  811:    return 0;
        -:  812:
        -:  813:  case smithy:
        2:  814:    return useSmithy(handPos, currentPlayer, state);
call    0 returned 100%
        -:  815:
        -:  816:  case village:
        -:  817:    //+1 Card
        3:  818:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  819:
        -:  820:    //+2 Actions
        3:  821:    state->numActions = state->numActions + 2;
        -:  822:
        -:  823:    //discard played card from hand
        3:  824:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        3:  825:    return 0;
        -:  826:
        -:  827:  case baron:
    #####:  828:    state->numBuys++;//Increase buys by 1!
    #####:  829:    if (choice1 > 0) {//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  830:      int p = 0;//Iterator for hand!
    #####:  831:      int card_not_discarded = 1;//Flag for discard set!
    #####:  832:      while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  833:        if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  834:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  835:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  836:          state->discardCount[currentPlayer]++;
    #####:  837:          for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  838:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  839:          }
    #####:  840:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  841:          state->handCount[currentPlayer]--;
    #####:  842:          card_not_discarded = 0;//Exit the loop
        -:  843:        }
    #####:  844:        else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  845:          if (DEBUG) {
        -:  846:            printf("No estate cards in your hand, invalid choice\n");
        -:  847:            printf("Must gain an estate if there are any\n");
        -:  848:          }
    #####:  849:          if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  850:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  851:            state->supplyCount[estate]--;//Decrement estates
    #####:  852:            if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  853:              isGameOver(state);
call    0 never executed
        -:  854:            }
        -:  855:          }
    #####:  856:          card_not_discarded = 0;//Exit the loop
        -:  857:        }
        -:  858:
        -:  859:        else {
    #####:  860:          p++;//Next card
        -:  861:        }
        -:  862:      }
        -:  863:    }
        -:  864:
        -:  865:    else {
    #####:  866:      if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  867:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  868:        state->supplyCount[estate]--;//Decrement Estates
    #####:  869:        if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  870:          isGameOver(state);
call    0 never executed
        -:  871:        }
        -:  872:      }
        -:  873:    }
        -:  874:
        -:  875:
    #####:  876:    return 0;
        -:  877:
        -:  878:  case great_hall:
        -:  879:    //+1 Card
    #####:  880:    drawCard(currentPlayer, state);
call    0 never executed
        -:  881:
        -:  882:    //+1 Actions
    #####:  883:    state->numActions++;
        -:  884:
        -:  885:    //discard card from hand
    #####:  886:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  887:    return 0;
        -:  888:
        -:  889:  case minion:
        -:  890:    //+1 action
    #####:  891:    state->numActions++;
        -:  892:
        -:  893:    //discard card from hand
    #####:  894:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  895:
    #####:  896:    if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  897:    {
    #####:  898:      state->coins = state->coins + 2;
        -:  899:    }
        -:  900:
    #####:  901:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  902:    {
        -:  903:      //discard hand
    #####:  904:      while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  905:      {
    #####:  906:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  907:      }
        -:  908:
        -:  909:      //draw 4
    #####:  910:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  911:      {
    #####:  912:        drawCard(currentPlayer, state);
call    0 never executed
        -:  913:      }
        -:  914:
        -:  915:      //other players discard hand and redraw if hand size > 4
    #####:  916:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  917:      {
    #####:  918:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  919:        {
    #####:  920:          if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -:  921:          {
        -:  922:            //discard hand
    #####:  923:            while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -:  924:            {
    #####:  925:              discardCard(handPos, i, state, 0);
call    0 never executed
        -:  926:            }
        -:  927:
        -:  928:            //draw 4
    #####:  929:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  930:            {
    #####:  931:              drawCard(i, state);
call    0 never executed
        -:  932:            }
        -:  933:          }
        -:  934:        }
        -:  935:      }
        -:  936:
        -:  937:    }
    #####:  938:    return 0;
        -:  939:
        -:  940:  case steward:
    #####:  941:    if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  942:    {
        -:  943:      //+2 cards
    #####:  944:      drawCard(currentPlayer, state);
call    0 never executed
    #####:  945:      drawCard(currentPlayer, state);
call    0 never executed
        -:  946:    }
    #####:  947:    else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  948:    {
        -:  949:      //+2 coins
    #####:  950:      state->coins = state->coins + 2;
        -:  951:    }
        -:  952:    else
        -:  953:    {
        -:  954:      //trash 2 cards in hand
    #####:  955:      discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  956:      discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  957:    }
        -:  958:
        -:  959:    //discard card from hand
    #####:  960:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  961:    return 0;
        -:  962:
        -:  963:  case tribute:
    #####:  964:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  965:      if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  966:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  967:        state->deckCount[nextPlayer]--;
        -:  968:      }
    #####:  969:      else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  970:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  971:        state->discardCount[nextPlayer]--;
        -:  972:      }
        -:  973:      else {
        -:  974:        //No Card to Reveal
        -:  975:        if (DEBUG) {
        -:  976:          printf("No cards to reveal\n");
        -:  977:        }
        -:  978:      }
        -:  979:    }
        -:  980:
        -:  981:    else {
    #####:  982:      if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  983:        for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  984:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  985:          state->deckCount[nextPlayer]++;
    #####:  986:          state->discard[nextPlayer][i] = -1;
    #####:  987:          state->discardCount[nextPlayer]--;
        -:  988:        }
        -:  989:
    #####:  990:        shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -:  991:      }
    #####:  992:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  993:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  994:      state->deckCount[nextPlayer]--;
    #####:  995:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  996:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  997:      state->deckCount[nextPlayer]--;
        -:  998:    }
        -:  999:
    #####: 1000:    if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1001:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1002:      state->playedCardCount++;
    #####: 1003:      tributeRevealedCards[1] = -1;
        -: 1004:    }
        -: 1005:
    #####: 1006:    for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1007:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1008:        state->coins += 2;
        -: 1009:      }
        -: 1010:
    #####: 1011:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1012:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1013:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:      }
        -: 1015:      else {//Action Card
    #####: 1016:        state->numActions = state->numActions + 2;
        -: 1017:      }
        -: 1018:    }
        -: 1019:
    #####: 1020:    return 0;
        -: 1021:
        -: 1022:  case ambassador:
    #####: 1023:    j = 0;		//used to check if player has enough cards to discard
        -: 1024:
    #####: 1025:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1026:    {
    #####: 1027:      return -1;
        -: 1028:    }
        -: 1029:
    #####: 1030:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1031:    {
    #####: 1032:      return -1;
        -: 1033:    }
        -: 1034:
    #####: 1035:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1036:    {
    #####: 1037:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1038:      {
    #####: 1039:        j++;
        -: 1040:      }
        -: 1041:    }
    #####: 1042:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1043:    {
    #####: 1044:      return -1;
        -: 1045:    }
        -: 1046:
        -: 1047:    if (DEBUG)
        -: 1048:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1049:
        -: 1050:    //increase supply count for choosen card by amount being discarded
    #####: 1051:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1052:
        -: 1053:    //each other player gains a copy of revealed card
    #####: 1054:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1055:    {
    #####: 1056:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1057:      {
    #####: 1058:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1059:      }
        -: 1060:    }
        -: 1061:
        -: 1062:    //discard played card from hand
    #####: 1063:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1064:
        -: 1065:    //trash copies of cards returned to supply
    #####: 1066:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1067:    {
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:      {
    #####: 1070:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1071:        {
    #####: 1072:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1073:          break;
        -: 1074:        }
        -: 1075:      }
        -: 1076:    }
        -: 1077:
    #####: 1078:    return 0;
        -: 1079:
        -: 1080:  case cutpurse:
        -: 1081:
    #####: 1082:    return useCutpurse(handPos, currentPlayer, state);
call    0 never executed
        -: 1083:
        -: 1084:  case embargo:
        -: 1085:
    #####: 1086:    return useEmbargo(choice1, handPos, currentPlayer, state);
call    0 never executed
        -: 1087:
        -: 1088:  case outpost:
        -: 1089:    //set outpost flag
        1: 1090:    state->outpostPlayed++;
        -: 1091:
        -: 1092:    //discard card
        1: 1093:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1094:    return 0;
        -: 1095:
        -: 1096:  case salvager:
        -: 1097:
    #####: 1098:    return useSalvager(choice1, handPos, currentPlayer, state);
call    0 never executed
        -: 1099:
        -: 1100:  case sea_hag:
    #####: 1101:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1102:      if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1103:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1104:        state->discardCount[i]++;
    #####: 1105:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1106:      }
        -: 1107:    }
    #####: 1108:    return 0;
        -: 1109:
        -: 1110:  case treasure_map:
        -: 1111:    //search hand for another treasure_map
        1: 1112:    index = -1;
        6: 1113:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1114:    {
        5: 1115:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1116:      {
    #####: 1117:        index = i;
    #####: 1118:        break;
        -: 1119:      }
        -: 1120:    }
        1: 1121:    if (index > -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1122:    {
        -: 1123:      //trash both treasure cards
    #####: 1124:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1125:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1126:
        -: 1127:      //gain 4 Gold cards
    #####: 1128:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1129:      {
    #####: 1130:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1131:      }
        -: 1132:
        -: 1133:      //return success
    #####: 1134:      return 1;
        -: 1135:    }
        -: 1136:
        -: 1137:    //no second treasure_map found in hand
        1: 1138:    return -1;
        -: 1139:  }
        -: 1140:
    #####: 1141:  return -1;
        -: 1142:}
        -: 1143:
function discardCard called 11 returned 100% blocks executed 78%
       11: 1144:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1145:{
        -: 1146:
        -: 1147:  //if card is not trashed, added to Played pile
       11: 1148:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1149:  {
        -: 1150:    //add card to played pile
       11: 1151:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       11: 1152:    state->playedCardCount++;
        -: 1153:  }
        -: 1154:
        -: 1155:  //set played card to -1
       11: 1156:  state->hand[currentPlayer][handPos] = -1;
        -: 1157:
        -: 1158:  //remove card from player's hand
       11: 1159:  if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1160:  {
        -: 1161:    //reduce number of cards in hand
    #####: 1162:    state->handCount[currentPlayer]--;
        -: 1163:  }
       11: 1164:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1165:  {
        -: 1166:    //reduce number of cards in hand
    #####: 1167:    state->handCount[currentPlayer]--;
        -: 1168:  }
        -: 1169:  else
        -: 1170:  {
        -: 1171:    //replace discarded card with last card in hand
       11: 1172:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1173:    //set last card to -1
       11: 1174:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1175:    //reduce number of cards in hand
       11: 1176:    state->handCount[currentPlayer]--;
        -: 1177:  }
        -: 1178:
       11: 1179:  return 0;
        -: 1180:}
        -: 1181:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1182:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1183:{
        -: 1184:  //Note: supplyPos is enum of choosen card
        -: 1185:
        -: 1186:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1187:  if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1188:  {
    #####: 1189:    return -1;
        -: 1190:  }
        -: 1191:
        -: 1192:  //added card for [whoseTurn] current player:
        -: 1193:  // toFlag = 0 : add to discard
        -: 1194:  // toFlag = 1 : add to deck
        -: 1195:  // toFlag = 2 : add to hand
        -: 1196:
    #####: 1197:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1198:  {
    #####: 1199:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1200:    state->deckCount[player]++;
        -: 1201:  }
    #####: 1202:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1203:  {
    #####: 1204:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1205:    state->handCount[player]++;
        -: 1206:  }
        -: 1207:  else
        -: 1208:  {
    #####: 1209:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1210:    state->discardCount[player]++;
        -: 1211:  }
        -: 1212:
        -: 1213:  //decrease number in supply pile
    #####: 1214:  state->supplyCount[supplyPos]--;
        -: 1215:
    #####: 1216:  return 0;
        -: 1217:}
        -: 1218:
function updateCoins called 46 returned 100% blocks executed 82%
       46: 1219:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1220:{
        -: 1221:  int i;
        -: 1222:
        -: 1223:  //reset coin count
       46: 1224:  state->coins = 0;
        -: 1225:
        -: 1226:  //add coins for each Treasure card in player's hand
      278: 1227:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1228:  {
      232: 1229:    if (state->hand[player][i] == copper)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1230:    {
      173: 1231:      state->coins += 1;
        -: 1232:    }
       59: 1233:    else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1234:    {
    #####: 1235:      state->coins += 2;
        -: 1236:    }
       59: 1237:    else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1238:    {
    #####: 1239:      state->coins += 3;
        -: 1240:    }
        -: 1241:  }
        -: 1242:
        -: 1243:  //add bonus
       46: 1244:  state->coins += bonus;
        -: 1245:
       46: 1246:  return 0;
        -: 1247:}
        -: 1248:
        -: 1249:/*refactoring card actions out of cardEffect's switch statement:
        -: 1250:adventurer, smithy, salvager, embargo */
        -: 1251:
function useAdventurer called 4 returned 100% blocks executed 100%
        4: 1252:int useAdventurer(int currentPlayer, struct gameState* state, int* tempHand)
        -: 1253:{
        4: 1254:  int drawntreasure = 0;
        -: 1255:  int cardDrawn;
        4: 1256:  int z = 0;// this is the counter for the temp hand
        -: 1257:
       30: 1258:  while (drawntreasure < 2) {
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
       22: 1259:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        5: 1260:      shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1261:    }
       22: 1262:    drawCard(currentPlayer, state);
call    0 returned 100%
       22: 1263:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] -
        -: 1264:      1];//top card of hand is most recently drawn card.
       22: 1265:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        8: 1266:      drawntreasure++;
        -: 1267:    else {
       14: 1268:      tempHand[z] = cardDrawn;
       14: 1269:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       14: 1270:      z++;
        -: 1271:    }
        -: 1272:  }
        -: 1273:  /*Bug* removed "=" from while statement*/
       19: 1274:  while (z - 1 > 0) {
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
       11: 1275:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = tempHand[z - 1]; // discard all cards in play that have been drawn
       11: 1276:    z = z - 1;
        -: 1277:  }
        4: 1278:  return 0;
        -: 1279:}
        -: 1280:
function useSmithy called 2 returned 100% blocks executed 100%
        2: 1281:int useSmithy(int handPos, int currentPlayer, struct gameState* state)//+3 Cards
        -: 1282:{
        -: 1283:  //drawn three cards
       10: 1284:  for (int i = 0; i <= 3; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        8: 1285:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1286:  }
        -: 1287:
        -: 1288:  //discard card from hand
        2: 1289:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1290:  return 0;
        -: 1291:}
        -: 1292:
function useSalvager called 0 returned 0% blocks executed 0%
    #####: 1293:int useSalvager(int choice1, int handPos, int currentPlayer, struct gameState* state) {//+1 buy
        -: 1294:
    #####: 1295:  state->numBuys++;
        -: 1296:
    #####: 1297:  if (choice1) {
branch  0 never executed
branch  1 never executed
        -: 1298:    //gain coins equal to trashed card
    #####: 1299:    state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1300:    //trash card
    #####: 1301:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
        -: 1302:  }
        -: 1303:
        -: 1304:  //discard card
    #####: 1305:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1306:  return 0;
        -: 1307:
        -: 1308:}
        -: 1309:
        -: 1310:
function useEmbargo called 0 returned 0% blocks executed 0%
    #####: 1311:int useEmbargo(int choice1, int handPos, int currentPlayer, struct gameState* state) {
        -: 1312:  //+2 Coins
    #####: 1313:  state->coins = state->coins + 2;
        -: 1314:
        -: 1315:  //see if selected pile is in play
    #####: 1316:  if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1317:  {
    #####: 1318:    return -1;
        -: 1319:  }
        -: 1320:
        -: 1321:  //add embargo token to selected supply pile
    #####: 1322:  state->embargoTokens[choice1]++;
        -: 1323:
        -: 1324:  //trash card
    #####: 1325:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1326:  return 0;
        -: 1327:}
        -: 1328:
function useCutpurse called 0 returned 0% blocks executed 0%
    #####: 1329:int useCutpurse(int handPos, int currentPlayer, struct gameState* state) {
    #####: 1330:  updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1331:  for (int i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1332:    if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1333:      for (int j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1334:        if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1335:          discardCard(j, i, state, 0);
call    0 never executed
    #####: 1336:          break;
        -: 1337:        }
    #####: 1338:        if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####: 1339:          for (int k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1340:            if (DEBUG)
        -: 1341:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1342:          }
    #####: 1343:          break;
        -: 1344:        }
        -: 1345:      }
        -: 1346:
        -: 1347:    }
        -: 1348:
        -: 1349:  }
        -: 1350:
        -: 1351:  //discard played card from hand
    #####: 1352:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1353:
    #####: 1354:  return 0;
        -: 1355:}
        -: 1356://end of dominion.c
